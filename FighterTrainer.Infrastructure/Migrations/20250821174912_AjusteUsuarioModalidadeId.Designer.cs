// <auto-generated />
using System;
using FighterTrainer.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FighterTrainer.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250821174912_AjusteUsuarioModalidadeId")]
    partial class AjusteUsuarioModalidadeId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Atleta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Agilidade")
                        .HasColumnType("integer");

                    b.Property<int>("Altura")
                        .HasColumnType("integer");

                    b.Property<string>("Apelido")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Defesa")
                        .HasColumnType("integer");

                    b.Property<int>("FocoMental")
                        .HasColumnType("integer");

                    b.Property<int>("LutaEmPe")
                        .HasColumnType("integer");

                    b.Property<decimal>("Peso")
                        .HasColumnType("numeric");

                    b.Property<int>("Resistencia")
                        .HasColumnType("integer");

                    b.Property<int>("Solo")
                        .HasColumnType("integer");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<int>("Wrestling")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Atletas");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Federacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Federacao");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.FichaTreino", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AtletaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.Property<long>("TurmaId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsuarioModalidadeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AtletaId");

                    b.HasIndex("TurmaId");

                    b.HasIndex("UsuarioModalidadeId");

                    b.ToTable("FichasTreino");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Graduacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FederacaoId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Grau")
                        .HasColumnType("integer");

                    b.Property<long>("ModalidadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FederacaoId");

                    b.ToTable("Graduacao");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Modalidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Modalidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Treinador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Treinadores");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Turma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("HoraFimAula")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HoraInicioAula")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LimiteAlunos")
                        .HasColumnType("integer");

                    b.Property<long>("TreinadorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TreinadorResponsavelId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnidadeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TreinadorId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Unidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("CidadeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("Unidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.UsuarioModalidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GraduacaoId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModalidadeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModalidadeId1")
                        .HasColumnType("bigint");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GraduacaoId");

                    b.HasIndex("ModalidadeId");

                    b.HasIndex("ModalidadeId1");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioModalidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.FichaTreino", b =>
                {
                    b.HasOne("FighterTrainer.Domain.Entities.Atleta", "Atleta")
                        .WithMany()
                        .HasForeignKey("AtletaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FighterTrainer.Domain.Entities.Turma", "Turma")
                        .WithMany()
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FighterTrainer.Domain.Entities.UsuarioModalidade", "UsuarioModalidade")
                        .WithMany()
                        .HasForeignKey("UsuarioModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atleta");

                    b.Navigation("Turma");

                    b.Navigation("UsuarioModalidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Graduacao", b =>
                {
                    b.HasOne("FighterTrainer.Domain.Entities.Federacao", "Federacao")
                        .WithMany()
                        .HasForeignKey("FederacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Federacao");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Turma", b =>
                {
                    b.HasOne("FighterTrainer.Domain.Entities.Treinador", "Treinador")
                        .WithMany()
                        .HasForeignKey("TreinadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FighterTrainer.Domain.Entities.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treinador");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Unidade", b =>
                {
                    b.HasOne("FighterTrainer.Domain.Entities.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.UsuarioModalidade", b =>
                {
                    b.HasOne("FighterTrainer.Domain.Entities.Graduacao", "Graduacao")
                        .WithMany()
                        .HasForeignKey("GraduacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FighterTrainer.Domain.Entities.Modalidade", "Modalidade")
                        .WithMany()
                        .HasForeignKey("ModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FighterTrainer.Domain.Entities.Modalidade", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("ModalidadeId1");

                    b.HasOne("FighterTrainer.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Graduacao");

                    b.Navigation("Modalidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FighterTrainer.Domain.Entities.Modalidade", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
